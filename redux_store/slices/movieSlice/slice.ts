/* Core */
import { createSlice, type PayloadAction } from '@reduxjs/toolkit'

/* Instruments */
import { loadMovies, shareMovie } from './thunks'

const initialState: MovieSliceState = {
  movies: [],
  pageIndex: 1,
  pageSize: 5,
  total: 0,
  status: 'idle',
}

export const movieSlice = createSlice({
  name: 'movie',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    addMovie: (state, action: PayloadAction<IMovie>) => {
      state.movies = [...state.movies, action.payload];
      state.total += 1;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loadMovies.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(loadMovies.fulfilled, (state, action) => {
        state.status = 'idle';
        if (action.payload.pageIndex === 1) {
          state.movies = action.payload.data!;
        } else {
          state.movies = [...state.movies, ...action.payload.data!];
        }
        state.total = action.payload.total ?? 0;
        state.pageIndex = action.payload.pageIndex;
      })
      .addCase(shareMovie.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(shareMovie.fulfilled, (state, action) => {
        state.status = 'idle'
      })
  },
})

/* Types */
export interface MovieSliceState extends BasePaging {
  movies: IMovie[],
  total: number,
  status: 'idle' | 'loading' | 'failed'
}
